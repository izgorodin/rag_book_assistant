name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      
      - name: Environment Information
        run: |
          python --version
          pip --version
          pip list

      - name: Install dependencies and project
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools
          pip install -r requirements.txt
          pip install -e .

      - name: Check installed packages
        run: pip freeze

      - name: Download NLTK data
        run: |
          python -c "import nltk; \
          nltk.download('punkt'); \
          nltk.download('stopwords'); \
          nltk.download('wordnet'); \
          nltk.download('words'); \
          nltk.download('averaged_perceptron_tagger'); \
          nltk.download('omw-1.4'); \
          nltk.download('tagsets'); \
          nltk.download('maxent_ne_chunker'); \
          nltk.download('universal_tagset')"

      - name: Run linter
        run: |
          pip install flake8
          flake8 . --verbose
        continue-on-error: true

      - name: Run tests
        run: |
          pip install pytest
          python -m pytest tests -v --capture=no     
        continue-on-error: true

  docker_build:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/rag-book-assistant:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker_build

    steps:
      - name: Trigger deployment on Railway
        run: |
          curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer ${{ secrets.RAILWAY_API_TOKEN }}" \
          -d '{"query":"mutation { deploy }"}' \
          https://backboard.railway.app/graphql

  check_deploy:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Wait for Deployment
        run: |
          sleep 60  # Даем время на развертывание

      - name: Check deployment on Railway
        run: |
          MAX_RETRIES=5
          RETRY_INTERVAL=30
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -f https://bookassistant.up.railway.app; then
              echo "Deployment successful!"
              exit 0
            fi
            echo "Attempt $i failed. Retrying in $RETRY_INTERVAL seconds..."
            sleep $RETRY_INTERVAL
          done
          echo "Deployment check failed after $MAX_RETRIES attempts"
          exit 1